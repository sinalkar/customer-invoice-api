# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InvoiceTax(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, i_taxt_id: int=None, v_tax_name: str=None, f_tax_percentage: float=None, e_tax_type: str=None, dt_created: datetime=None, dt_updated: datetime=None):  # noqa: E501
        """InvoiceTax - a model defined in Swagger

        :param i_taxt_id: The i_taxt_id of this InvoiceTax.  # noqa: E501
        :type i_taxt_id: int
        :param v_tax_name: The v_tax_name of this InvoiceTax.  # noqa: E501
        :type v_tax_name: str
        :param f_tax_percentage: The f_tax_percentage of this InvoiceTax.  # noqa: E501
        :type f_tax_percentage: float
        :param e_tax_type: The e_tax_type of this InvoiceTax.  # noqa: E501
        :type e_tax_type: str
        :param dt_created: The dt_created of this InvoiceTax.  # noqa: E501
        :type dt_created: datetime
        :param dt_updated: The dt_updated of this InvoiceTax.  # noqa: E501
        :type dt_updated: datetime
        """
        self.swagger_types = {
            'i_taxt_id': int,
            'v_tax_name': str,
            'f_tax_percentage': float,
            'e_tax_type': str,
            'dt_created': datetime,
            'dt_updated': datetime
        }

        self.attribute_map = {
            'i_taxt_id': 'iTaxtId',
            'v_tax_name': 'vTaxName',
            'f_tax_percentage': 'fTaxPercentage',
            'e_tax_type': 'eTaxType',
            'dt_created': 'dtCreated',
            'dt_updated': 'dtUpdated'
        }

        self._i_taxt_id = i_taxt_id
        self._v_tax_name = v_tax_name
        self._f_tax_percentage = f_tax_percentage
        self._e_tax_type = e_tax_type
        self._dt_created = dt_created
        self._dt_updated = dt_updated

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The invoice_tax of this InvoiceTax.  # noqa: E501
        :rtype: InvoiceTax
        """
        return util.deserialize_model(dikt, cls)

    @property
    def i_taxt_id(self) -> int:
        """Gets the i_taxt_id of this InvoiceTax.


        :return: The i_taxt_id of this InvoiceTax.
        :rtype: int
        """
        return self._i_taxt_id

    @i_taxt_id.setter
    def i_taxt_id(self, i_taxt_id: int):
        """Sets the i_taxt_id of this InvoiceTax.


        :param i_taxt_id: The i_taxt_id of this InvoiceTax.
        :type i_taxt_id: int
        """

        self._i_taxt_id = i_taxt_id

    @property
    def v_tax_name(self) -> str:
        """Gets the v_tax_name of this InvoiceTax.


        :return: The v_tax_name of this InvoiceTax.
        :rtype: str
        """
        return self._v_tax_name

    @v_tax_name.setter
    def v_tax_name(self, v_tax_name: str):
        """Sets the v_tax_name of this InvoiceTax.


        :param v_tax_name: The v_tax_name of this InvoiceTax.
        :type v_tax_name: str
        """

        self._v_tax_name = v_tax_name

    @property
    def f_tax_percentage(self) -> float:
        """Gets the f_tax_percentage of this InvoiceTax.


        :return: The f_tax_percentage of this InvoiceTax.
        :rtype: float
        """
        return self._f_tax_percentage

    @f_tax_percentage.setter
    def f_tax_percentage(self, f_tax_percentage: float):
        """Sets the f_tax_percentage of this InvoiceTax.


        :param f_tax_percentage: The f_tax_percentage of this InvoiceTax.
        :type f_tax_percentage: float
        """

        self._f_tax_percentage = f_tax_percentage

    @property
    def e_tax_type(self) -> str:
        """Gets the e_tax_type of this InvoiceTax.


        :return: The e_tax_type of this InvoiceTax.
        :rtype: str
        """
        return self._e_tax_type

    @e_tax_type.setter
    def e_tax_type(self, e_tax_type: str):
        """Sets the e_tax_type of this InvoiceTax.


        :param e_tax_type: The e_tax_type of this InvoiceTax.
        :type e_tax_type: str
        """
        allowed_values = ["Tax", "Compound Tax"]  # noqa: E501
        if e_tax_type not in allowed_values:
            raise ValueError(
                "Invalid value for `e_tax_type` ({0}), must be one of {1}"
                .format(e_tax_type, allowed_values)
            )

        self._e_tax_type = e_tax_type

    @property
    def dt_created(self) -> datetime:
        """Gets the dt_created of this InvoiceTax.


        :return: The dt_created of this InvoiceTax.
        :rtype: datetime
        """
        return self._dt_created

    @dt_created.setter
    def dt_created(self, dt_created: datetime):
        """Sets the dt_created of this InvoiceTax.


        :param dt_created: The dt_created of this InvoiceTax.
        :type dt_created: datetime
        """

        self._dt_created = dt_created

    @property
    def dt_updated(self) -> datetime:
        """Gets the dt_updated of this InvoiceTax.


        :return: The dt_updated of this InvoiceTax.
        :rtype: datetime
        """
        return self._dt_updated

    @dt_updated.setter
    def dt_updated(self, dt_updated: datetime):
        """Sets the dt_updated of this InvoiceTax.


        :param dt_updated: The dt_updated of this InvoiceTax.
        :type dt_updated: datetime
        """

        self._dt_updated = dt_updated
