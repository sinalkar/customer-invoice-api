# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error_model import ErrorModel  # noqa: F401,E501
from swagger_server import util


class ExtendedErrorModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, code: int=None, root_cause: str=None):  # noqa: E501
        """ExtendedErrorModel - a model defined in Swagger

        :param message: The message of this ExtendedErrorModel.  # noqa: E501
        :type message: str
        :param code: The code of this ExtendedErrorModel.  # noqa: E501
        :type code: int
        :param root_cause: The root_cause of this ExtendedErrorModel.  # noqa: E501
        :type root_cause: str
        """
        self.swagger_types = {
            'message': str,
            'code': int,
            'root_cause': str
        }

        self.attribute_map = {
            'message': 'message',
            'code': 'code',
            'root_cause': 'rootCause'
        }

        self._message = message
        self._code = code
        self._root_cause = root_cause

    @classmethod
    def from_dict(cls, dikt) -> 'ExtendedErrorModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExtendedErrorModel of this ExtendedErrorModel.  # noqa: E501
        :rtype: ExtendedErrorModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this ExtendedErrorModel.


        :return: The message of this ExtendedErrorModel.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ExtendedErrorModel.


        :param message: The message of this ExtendedErrorModel.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def code(self) -> int:
        """Gets the code of this ExtendedErrorModel.


        :return: The code of this ExtendedErrorModel.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this ExtendedErrorModel.


        :param code: The code of this ExtendedErrorModel.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if code is not None and code > 600:  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a value less than or equal to `600`")  # noqa: E501
        if code is not None and code < 100:  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a value greater than or equal to `100`")  # noqa: E501

        self._code = code

    @property
    def root_cause(self) -> str:
        """Gets the root_cause of this ExtendedErrorModel.


        :return: The root_cause of this ExtendedErrorModel.
        :rtype: str
        """
        return self._root_cause

    @root_cause.setter
    def root_cause(self, root_cause: str):
        """Sets the root_cause of this ExtendedErrorModel.


        :param root_cause: The root_cause of this ExtendedErrorModel.
        :type root_cause: str
        """
        if root_cause is None:
            raise ValueError("Invalid value for `root_cause`, must not be `None`")  # noqa: E501

        self._root_cause = root_cause
